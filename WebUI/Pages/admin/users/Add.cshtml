@page
@model WebUI.Pages.admin.user.AddModel
@{
}
<section class="content">
    <div class="card-body">
        <div class="row">
            <div class="col-6">
                <h3 class="d-inline-block">New User Add</h3>
            </div>

        </div>

        <form method="post">            
            <div class="form-group">
                <label for="inputName">Name</label>
                <input type="text" id="inputName" class="form-control" asp-for="Name" placeholder="Name">
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="inputName">Surname</label>
                <input type="text" id="inputName" class="form-control" asp-for="Surname" placeholder="Surname">
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="RoleId">Role</label>
                <select asp-for="RoleId" class="form-control">
                    <option value="">Select Role</option>
                    @if (Model.Roles is not null)
                    {
                        @foreach (var role in Model.Roles)
                        {
                            <option value="@role.Id">@role.Name</option>
                        }

                    }
                </select>
                <span asp-validation-for="RoleId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="inputName">Password</label>
                <input type="text" id="inputName" class="form-control" asp-for="Password" placeholder="Password">
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="inputName">Email</label>
                <input type="email" id="inputName" class="form-control" asp-for="Email" placeholder="Email">
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ImagePath">Choose Image: </label>
                <input type="file" class="form-control-file" id="image" asp-for="ImagePath">
                <span asp-validation-for="ImagePath" class="text-danger"></span>
            </div>

            @if (!string.IsNullOrEmpty(Model?.ImagePath))
            {
                <div class="form-group">
                    <label>Uploaded Image:</label>
                    <img src="@Model.ImagePath" alt="Uploaded Image" class="img-fluid">
                </div>
            }

            <div class="row float-right">
                <div class="col-12">
                    <input type="submit" value="Cancel" class="btn btn-default ">
                    <input type="submit" value="Save Changes" class="btn btn-primary ">
                </div>
            </div>
        </form>
        <!-- /.card-body -->
    </div>


</section>


@section scripts {
    <script src="~/assets/vendor/ckeditor5/ckeditor.js"></script>

    <script type="text/javascript">
        docReady(function () {
            var myEditor = null;
            // DOM is loaded and ready for manipulation here

            ClassicEditor
                .create(document.querySelector("#Content"), {
                    height: 400,
                    Toolbar: { //Set the toolbar
                        items: [
                            'heading',
                            '|',
                            'bold',
                            'italic',
                            'underline',
                            'link',
                            'bulletedList',
                            'numberedList',
                            'imageUpload',
                            'blockQuote',
                            'insertTable',
                            //'mediaEmbed',
                            'undo',
                            'redo'
                        ]
                    },
                    extraPlugins: [MyCustomUploadAdapterPlugin]
                })
                .then(editor => {
                    myEditor = editor;
                })
                .catch(error => {
                    console.error(error);
                });

            var inputFile = document.querySelector('#image');

            if (inputFile) {
                inputFile.addEventListener('change', function () {
                    // Check if a file has been selected
                    if (inputFile.files.length > 0) {
                        const file = inputFile.files[0];
                        uploadFile(file);
                    }
                });
            }

            function uploadFile(file) {
                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/Home/UploadCKEditorImage?temp=true', true);
                xhr.responseType = 'json';

                xhr.upload.addEventListener('progress', function (event) {
                    // Update progress here if needed
                });

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        const response = xhr.response;
                        if (response && response.uploaded) {
                            // The file was successfully uploaded
                            const imageUrl = response.url;

                            inputFile.nodeValue = imageUrl;
                        } else {
                            // Handle upload error
                        }
                    } else {
                        // Handle request error
                    }
                };

                const formData = new FormData();
                formData.append('upload', file);
                xhr.send(formData);
            }
        });

        function docReady(fn) {
            // see if DOM is already available
            if (document.readyState === "complete" || document.readyState === "interactive") {
                // call on next available tick
                setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.

                // Construct the URL with the temp parameter
                const url = '/Home/UploadCKEditorImage?temp=' + false;

                xhr.open('POST', url, true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    resolve({
                        default: response.url
                    });
                });

                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            _sendRequest(file) {
                const data = new FormData();
                data.append('upload', file);
                this.xhr.send(data);
            }
        }
    </script>
}
