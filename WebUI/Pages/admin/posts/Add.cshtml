@page
@using Domain.Enums;
@model WebUI.Pages.admin.posts.AddModel
@{
}

<!-- Main content -->
<section class="content">
    <h3 class="mt-3 mb-4">Add Post Translations</h3>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">

                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">@Model?.DefaultLanguage?.Title</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>

                    <div class="card-body">
                        <form method="post" id="languageForm">
                            <!-- Your form content here -->
                            <div class="form-group">
                                <label asp-for="Title">Title</label>
                                <input type="text" id="inputName" class="form-control"
                                       asp-for="Title" placeholder="Post title...">
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="CategoryId">Category</label>
                                <select asp-for="CategoryId" class="form-control">
                                    <option value="">Select Category</option>
                                    @if (Model?.Categories is not null)
                                    {
                                        @foreach (var category in Model.Categories)
                                        {
                                            <option value="@category.Id">@category.Description</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="CategoryId" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="Status">Status</label>
                                <select asp-for="Status" class="form-control" asp-items="Html.GetEnumSelectList<Status>()">
                                    <option value="">Select Status</option>
                                </select>
                                <span asp-validation-for="Status" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="PublishDate">Publish date</label>
                                <input type="date" id="PublishDate" class="form-control" asp-for="PublishDate"
                                       data-val-date placeholder="PublishDate">
                                <span asp-validation-for="PublishDate" class="text-danger"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="Content">Content: </label>
                                <textarea asp-for="Content" id="Content" name="Content" rows="4"
                                          class="form-control" placeholder="Please enter the announcement content"></textarea>
                                <span asp-validation-for="Content" class="text-danger"></span>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    <input type="submit" value="Cancel" class="btn btn-default">
                                    <input type="submit" value="Save Changes" class="btn btn-primary">
                                </div>
                            </div>
                        </form>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        </div>
    </div>

</section>

@section scripts {
    <script src="~/assets/vendor/ckeditor5/ckeditor.js"></script>

    <script type="text/javascript">
        docReady(function () {
            var myEditor = null;
            // DOM is loaded and ready for manipulation here

            ClassicEditor
                .create(document.querySelector("#Content"), {
                    height: 400,
                    Toolbar: { //Set the toolbar
                        items: [
                            'heading',
                            '|',
                            'bold',
                            'italic',
                            'underline',
                            'link',
                            'bulletedList',
                            'numberedList',
                            'imageUpload',
                            'blockQuote',
                            'insertTable',
                            //'mediaEmbed',
                            'undo',
                            'redo'
                        ]
                    },
                    extraPlugins: [MyCustomUploadAdapterPlugin]
                })
                .then(editor => {
                    myEditor = editor;
                })
                .catch(error => {
                    console.error(error);
                });
        });

        function docReady(fn) {
            // see if DOM is already available
            if (document.readyState === "complete" || document.readyState === "interactive") {
                // call on next available tick
                setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '/Home/UploadCKEditorImage', true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    resolve({
                        default: response.url
                    });
                });

                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            _sendRequest(file) {
                const data = new FormData();
                data.append('upload', file);
                this.xhr.send(data);
            }
        }
    </script>
}
