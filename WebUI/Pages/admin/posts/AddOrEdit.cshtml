@page
@using Application.Common.Models;
@using Domain.Enums;
@model WebUI.Pages.admin.posts.AddOrEditModel
@{
}

<!-- Main content -->
<section class="content">

    <h3 class="mt-3 mb-4">Add or Edir Post Translations</h3>

    @if (Model?.Languages is not null)
    {
        @foreach (LanguageDto language in Model.Languages)
        {
            <div class="col-md-6">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">@language.LanguageCode</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>

                    <div class="card-body">

                        @*yoxla gor bu dildeki translation varsa datasini yaz yoxdursa bos qoy*@
                        <form method="post" id="languageForm_@language.Id">

                            @if (Model.Translations is not null)
                            {
                                Model.Content = null;
                                @*update*@
                                Model.TranslationDto = Model.Translations.FirstOrDefault(t => t.LanguageId == language.Id);

                                if (Model.TranslationDto is not null)
                                {
                                    List < PostHashtagDto> hashtags = Model.PostHashtags.FindAll(h => h.NewsId == Model.TranslationDto.Id);

                                    Model.Content = Model.TranslationDto.Context;

                                    <div class="form-group">
                                        <label asp-for="Title">Title</label>
                                        <input type="text" id="inputName" class="form-control"
                                               asp-for="Title" placeholder="Category name..."
                                               value="@Model.TranslationDto.Title">
                                        <span asp-validation-for="Title" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label for="Status">Status</label>
                                        <select asp-for="@Model.TranslationDto.Status" class="form-control" asp-items="Html.GetEnumSelectList<Status>()">
                                            <option value="@Model.TranslationDto.Status">Select Status</option>
                                        </select>
                                        <span asp-validation-for="@Model.TranslationDto.Status" class="text-danger"></span>
                                    </div>

                                    <input type="hidden" asp-for="@Model.TranslationDto.Id" />
                                    <input type="hidden" asp-for="@Model.TranslationDto.LanguageId" />

                                    <div class="form-group">
                                        <label for="PublishDate">Publish date</label>
                                        <input type="date" id="PublishDate" class="form-control"
                                               asp-for="@Model.TranslationDto.PublishDate"
                                               data-val-date placeholder="PublishDate">
                                        <span asp-validation-for="@Model.TranslationDto.PublishDate" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="Content">Content: </label>
                                        <textarea asp-for="Content" id="Content_@language.Id" name="Content" rows="4" class="form-control" placeholder="Please enter the announcement content">@Model.Content</textarea>
                                        <span asp-validation-for="Content" class="text-danger"></span>
                                    </div>


                                    <!-- Display and manage hashtags -->
                                    @if (hashtags is not null)
                                    {
                                        <div class="form-group">
                                            <label asp-for="PostTags">Hashtags</label>
                                            <input type="text" id="hashtagsInput" class="form-control"
                                                   asp-for="PostTags"
                                                   value="@string.Join(" ", hashtags.Select(hashtag =>
                                            $"#{Model.Hashtags.FirstOrDefault(h => h.Id == hashtag.HashtagId)?.Title}"))">
                                        </div>
                                    }


                                    <div class="row float-right">
                                        <div class="col-12">
                                            <input type="submit" value="Cancel" class="btn btn-default ">
                                            <input type="submit" value="Save Changes" class="btn btn-primary ">
                                        </div>
                                    </div>
                                }

                                @*create*@
                                else
                                {
                                    <div class="form-group">
                                        <label asp-for="Title">Title</label>
                                        <input type="text" id="inputName" class="form-control"
                                               asp-for="Title" placeholder="Category name...">
                                        <span asp-validation-for="Title" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label for="Status">Status</label>
                                        <select asp-for="@Model.TranslationDto.Status" class="form-control" asp-items="Html.GetEnumSelectList<Status>()">
                                            <option value="">Select Status</option>
                                        </select>
                                        <span asp-validation-for="@Model.TranslationDto.Status" class="text-danger"></span>
                                    </div>

                                    <input type="hidden" asp-for="@Model.TranslationDto.LanguageId" value="@language.Id" />

                                    <div class="form-group">
                                        <label asp-for="@Model.TranslationDto.PublishDate">Publish date</label>
                                        <input type="date" id="PublishDate" class="form-control" asp-for="@Model.TranslationDto.PublishDate"
                                               data-val-date placeholder="PublishDate">
                                        <span asp-validation-for="@Model.TranslationDto.PublishDate" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="Content">Content: </label>
                                        <textarea asp-for="Content" id="Content_@language.Id" name="Content" rows="4"
                                                  class="form-control" placeholder="Please enter the announcement content"></textarea>
                                        <span asp-validation-for="Content" class="text-danger"></span>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="PostTags">Hashtags</label>
                                        <input type="text" id="inputHashtags" class="form-control"
                                               asp-for="PostTags" placeholder="Post hashtag...">
                                        <span asp-validation-for="PostTags" class="text-danger"></span>
                                    </div>

                                    <div class="row float-right">
                                        <div class="col-12">
                                            <input type="submit" value="Cancel" class="btn btn-default ">
                                            <input type="submit" value="Save Changes" class="btn btn-primary ">
                                        </div>
                                    </div>
                                }
                            }

                        </form>

                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        }

    }

</section>

@section scripts {
    <script src="~/assets/vendor/ckeditor5/ckeditor.js"></script>

    <script type="text/javascript">

        docReady(function () {

            var myEditor = null;

        @foreach (LanguageDto language in Model.Languages)
        {

            <text>
                    ClassicEditor
                        .create(document.querySelector("#Content_@language.Id"), { // Use a unique identifier
                            height: 400,
                            toolbar: { // Set the toolbar
                                items: [
                                    'heading',
                                    '|',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'link',
                                    'bulletedList',
                                    'numberedList',
                                    'imageUpload',
                                    'blockQuote',
                                    'insertTable',
                                    //'mediaEmbed',
                                    'undo',
                                    'redo'
                                ]
                            },
                            extraPlugins: [MyCustomUploadAdapterPlugin]
                        })
                        .then(editor => {
                            myEditor = editor;
                        })
                        .catch(error => {
                            console.error(error);
                        });
            </text>
        }


                                                            var inputFile = document.querySelector('#image');

            if (inputFile) {
                inputFile.addEventListener('change', function () {
                    // Check if a file has been selected
                    if (inputFile.files.length > 0) {
                        const file = inputFile.files[0];
                        uploadFile(file);
                    }
                });
            }

            function uploadFile(file) {
                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/Home/UploadCKEditorImage?temp=true', true);
                xhr.responseType = 'json';

                xhr.upload.addEventListener('progress', function (event) {
                    // Update progress here if needed
                });

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        const response = xhr.response;
                        if (response && response.uploaded) {
                            // The file was successfully uploaded
                            const imageUrl = response.url;

                            inputFile.nodeValue = imageUrl;
                        } else {
                            // Handle upload error
                        }
                    } else {
                        // Handle request error
                    }
                };

                const formData = new FormData();
                formData.append('upload', file);
                xhr.send(formData);
            }
        });

        function docReady(fn) {
            // see if DOM is already available
            if (document.readyState === "complete" || document.readyState === "interactive") {
                // call on next available tick
                setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.

                // Construct the URL with the temp parameter
                const url = '/Home/UploadCKEditorImage?temp=' + false;

                xhr.open('POST', url, true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    resolve({
                        default: response.url
                    });
                });

                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            _sendRequest(file) {
                const data = new FormData();
                data.append('upload', file);
                this.xhr.send(data);
            }
        }
    </script>
}
